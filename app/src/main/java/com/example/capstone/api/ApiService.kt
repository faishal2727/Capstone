package com.example.capstone.apiimport com.example.capstone.model.*import com.example.capstone.model.event_model.*import com.example.capstone.model.login_model.ResponseLoginimport com.example.capstone.model.register_model.ResponseRegisterimport com.example.capstone.model.user_model.ResponseUpdateimport com.example.capstone.model.user_model.ResponseUserimport okhttp3.Callimport okhttp3.MultipartBodyimport okhttp3.RequestBodyimport retrofit2.http.*interface ApiService {    //    Auth Login    @FormUrlEncoded    @POST("apis/auth/login")    suspend fun login(        @Field("email") email: String,        @Field("password") password: String    ): ResponseLogin    //    Auth Register    @FormUrlEncoded    @POST("apis/auth/register")    suspend fun register(        @Field("name") name: String,        @Field("email") email: String,        @Field("password") password: String    ): ResponseRegister    //    Get Data User (Menampilkan Detail Profile User)    @GET("apis/auth/check")    suspend fun getDataUser(        @Header("Authorization") token: String,    ): ResponseUser    //    Update Data User (Ketika User Ingin Update Data)    @FormUrlEncoded    @PUT("apis/auth/update")    suspend fun updateProfile(        @Header("Authorization") token: String,        @Field("name") name: String,        @Field("email") email: String,        @Field("address") address: String,        @Field("phone") phone: String    ): ResponseUpdate    //    Update Avatar User  (Ketika User Ingin Update Avatar)    @Multipart    @PUT("apis/auth/update")    suspend fun updateProfileAvatar(        @Header("Authorization") token: String,        @Part image_profile: MultipartBody.Part,    ): ResponseUpdate    //    Get All Events  (Menampilkan Semua Daftar Event)    @GET("apis/event")    suspend fun getAllEvents(        @Header("Authorization") token: String    ): ResponseGreevents    //    Get All Events With Location (Menampilkan Daftar Event dengan Lokasinya)    @GET("apis/event")    suspend fun getEventMap(        @Header("Authorization") token: String,        @Query("location") location: Int    ): ResponseGreevents    //    Post Event  (Ketika Users Ingin Membagikan atau Post Event)    @Multipart    @POST("apis/event")    suspend fun uploadEvents(        @Header("Authorization") token: String,        @Part("name") name: RequestBody,        @Part("date") date: RequestBody,        @Part image_poster: MultipartBody.Part,        @Part pdf_file: MultipartBody.Part,        @Part("location") location: RequestBody,        @Part("deskripsi") deskripsi: RequestBody,        @Part("latitude") latitude: Double,        @Part("longitude") longtitude: Double,        @Part("author") author: RequestBody,        @Part("email") email: RequestBody,        @Part("contact_person") contact_person: RequestBody    ): ResponseGreevents    @Multipart    @POST("apis/event")    suspend fun uploadEventsWithoutLocation(        @Header("Authorization") token: String,        @Part("name") name: RequestBody,        @Part("date") date: RequestBody,        @Part image_poster: MultipartBody.Part,        @Part pdf_file: MultipartBody.Part,        @Part("location") location: RequestBody,        @Part("deskripsi") deskripsi: RequestBody,        @Part("author") author: RequestBody,        @Part("email") email: RequestBody,        @Part("contact_person") contact_person: RequestBody    ): ResponseGreevents    //    Get Event By Id (Menampilkan Detail Event)    @GET("apis/event/{id}")    suspend fun getEventById(        @Header("Authorization") token: String,        @Path("id") id: Int    ): ResponseDetailEvent    //    Post Join Event (Ketika Users Join Event)    @FormUrlEncoded    @POST("/apis/auth/ikut")    suspend fun joinEvent(        @Header("Authorization") token: String,        @Field("event_id") event_id: Int,        @Field("nama") nama: String,        @Field("alamat") alamat: String,        @Field("phone") phone: String    ): ResponseJoinEvent    //    Get List Post  (Menampilkan Daftar Event yang Telah di Bagikan atau Post)    @GET("apis/event/user")    suspend fun getListMyPostEvent(        @Header("Authorization") token: String    ): ResponseGreevents    //    Post Comment  (Ketika Users Komentar di Salah Satu Event)    @FormUrlEncoded    @POST("/apis/comment")    suspend fun postComment(        @Header("Authorization") token: String,        @Field("event_id") event_id: Int,        @Field("commentar") commentar: String    ): ResponseComment    //    Get List Data Join Event (Menampilkan Daftar Event yang Telah di Daftar)    @GET("apis/auth/ikut")    suspend fun getListJoin(        @Header("Authorization") token: String    ): ResponListJoinEvent    //    Search Event (Ketika Users Ingin Mencari Event)    @GET("apis/event/search/{key}")    suspend fun searchEvent(        @Header("Authorization") token: String,        @Path("key") key: String    ): ResponseSearchEvent    //    Delete Join Event (Ketika Users Ingin Cancel Event yang Telah Di daftar)    @DELETE("/apis/auth/ikut/{id}")    suspend fun deleteJoinEvent(        @Header("Authorization") token: String,        @Path("id") id: Int    ): ResponseDeleteJoin    //    Get Comment By Id (Menampilkan Detail Komentar)    @GET("apis/comment/{id}")    suspend fun getCommentById(        @Header("Authorization") token: String,        @Path("id") id: Int    ): ResponseDetailComment    //    Delete Comment By Id  (Ketika Users Ingin Menghapus Komentar)    @DELETE("apis/comment/{id}")    suspend fun deleteComment(        @Header("Authorization") token: String,        @Path("id") id: Int    ): ResponseDeleteComment    //      Delete Event  (Ketika Users Ingin Mengahapus Event yang Telah di Bagikan atau Post)    @DELETE("apis/event/{id}")    suspend fun deleteEvent(        @Header("Authorization") token: String,        @Path("id") id: Int    ): ResponseDeleteEvent    //      Update Event  (Ketika Users Ingin Mengupdate Event yang Telah di Bagikan atau Post)    @Multipart    @PUT("apis/event/{id}")    suspend fun updateEvent(        @Header("Authorization") token: String,        @Path("id") id : Int,        @Part("name") name: RequestBody,        @Part("date") date: RequestBody,        @Part image_poster: MultipartBody.Part,        @Part pdf_file: MultipartBody.Part,        @Part("location") location: RequestBody,        @Part("deskripsi") deskripsi: RequestBody,        @Part("latitude") latitude: Double,        @Part("longitude") longtitude: Double,        @Part("author") author: RequestBody,        @Part("email") email: RequestBody,        @Part("contact_person") contact_person: RequestBody    ): ResponseUpdateEvent    //      Update Event  (Ketika Users Ingin Mengupdate Event yang Telah di Bagikan atau Post)    @Multipart    @PUT("apis/event/{id}")    suspend fun updateEventWithoutImage(        @Header("Authorization") token: String,        @Path("id") id : Int,        @Part("name") name: RequestBody,        @Part("date") date: RequestBody,        @Part("location") location: RequestBody,        @Part("deskripsi") deskripsi: RequestBody,        @Part("latitude") latitude: Double,        @Part("longitude") longtitude: Double,        @Part("author") author: RequestBody,        @Part("email") email: RequestBody,        @Part("contact_person") contact_person: RequestBody    ): ResponseUpdateEvent    @Multipart    @PUT("apis/event/{id}")    suspend fun updateEventWithoutImageLocation(        @Header("Authorization") token: String,        @Path("id") id : Int,        @Part("name") name: RequestBody,        @Part("date") date: RequestBody,        @Part("location") location: RequestBody,        @Part("deskripsi") deskripsi: RequestBody,        @Part("author") author: RequestBody,        @Part("email") email: RequestBody,        @Part("contact_person") contact_person: RequestBody    ): ResponseUpdateEvent    @Multipart    @PUT("apis/event/{id}")    suspend fun updateEventsWithoutLocation(        @Header("Authorization") token: String,        @Part("id") id: Int,        @Part("name") name: RequestBody,        @Part("date") date: RequestBody,        @Part image_poster: MultipartBody.Part,        @Part pdf_file: MultipartBody.Part,        @Part("location") location: RequestBody,        @Part("deskripsi") deskripsi: RequestBody,        @Part("author") author: RequestBody,        @Part("email") email: RequestBody,        @Part("contact_person") contact_person: RequestBody    ): ResponseUpdateEvent    //    Update Comment  (Ketika Users Ingin Mengupdate Komentar)    @FormUrlEncoded    @PUT("apis/comment/{id}")    suspend fun updateComment(        @Header("Authorization") token: String,        @Path("id") id : Int,        @Field("commentar") commentar: String,    ): ResponseUpdateComment}
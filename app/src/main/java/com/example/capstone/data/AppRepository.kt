package com.example.capstone.dataimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.liveDataimport com.example.capstone.api.ApiServiceimport com.example.capstone.model.*import com.example.capstone.model.event_model.*import com.example.capstone.model.login_model.ResponseLoginimport com.example.capstone.model.register_model.ResponseRegisterimport com.example.capstone.model.user_model.ResponseUpdateimport com.example.capstone.model.user_model.ResponseUserimport com.example.capstone.preference.PreferenceLoginimport okhttp3.MultipartBodyimport okhttp3.RequestBodyclass AppRepository(private val prefe: PreferenceLogin, private val apiService: ApiService) {    //    Auth Login    fun autLogin(email: String, password: String): LiveData<Result<ResponseLogin>> = liveData {        emit(Result.Loading)        try {            val response = apiService.login(email, password)            if (response.status != 200) {                emit(Result.Error(response.msfg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    //    Auth Register    fun authRegister(        name: String,        email: String,        password: String    ): LiveData<Result<ResponseRegister>> = liveData {        emit(Result.Loading)        try {            val response = apiService.register(name, email, password)            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    //    Get Data User    fun getDataUser(): LiveData<Result<ResponseUser>> = liveData {        emit(Result.Loading)        try {            val response = apiService.getDataUser(                token = "Bearer ${prefe.getUser().token}"            )            if (response.status != 200) {                emit(Result.Error(response.msg))                Log.d("teri", "${response.msg}")            } else {                emit(Result.Success(response))                Log.d("ter", "${response.msg}")            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    //    Get All Events    fun getAllEvents(): LiveData<Result<ResponseGreevents>> = liveData {        emit(Result.Loading)        try {            val response = apiService.getAllEvents(                token = "Bearer ${prefe.getUser().token}"            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    //    Get All Event With Location    fun getEventMap(): LiveData<Result<ResponseGreevents>> = liveData {        emit(Result.Loading)        try {            val response = apiService.getEventMap(                token = "Bearer ${prefe.getUser().token}",                location = 1            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    //    Post Comment    fun postComment(        event_id: Int,        commentar: String    ): LiveData<Result<ResponseComment>> = liveData {        emit(Result.Loading)        try {            val response = apiService.postComment(                token = "Bearer ${prefe.getUser().token}",                event_id = event_id,                commentar = commentar            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    //    Post Join Event    fun joinEvent(        event_id: Int,        name: String,        alamat: String,        phone: String    ): LiveData<Result<ResponseJoinEvent>> = liveData {        emit(Result.Loading)        try {            val response = apiService.joinEvent(                token = "Bearer ${prefe.getUser().token}",                event_id = event_id,                nama = name,                alamat = alamat,                phone = phone            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    //    Get List Join Event    fun getListJoinEvent(): LiveData<Result<ResponListJoinEvent>> = liveData {        emit(Result.Loading)        try {            val response = apiService.getListJoin(                token = "Bearer ${prefe.getUser().token}"            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun getListMyPost(): LiveData<Result<ResponseGreevents>> = liveData {        emit(Result.Loading)        try {            val response = apiService.getListMyPostEvent(                token = "Bearer ${prefe.getUser().token}"            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    //    Get Event By Id    fun getEventById(id: Int): LiveData<Result<ResponseDetailEvent>> = liveData {        emit(Result.Loading)        try {            val response = apiService.getEventById(                token = "Bearer ${prefe.getUser().token}",                id = id            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    //    Search Event    fun searchEvent(key: String): LiveData<Result<ResponseSearchEvent>> = liveData {        emit(Result.Loading)        try {            val response = apiService.searchEvent(                token = "Bearer ${prefe.getUser().token}",                key = key            )            Log.d("tisu", "${response.msg}")            if (response.status != 200) {                emit(Result.Error(response.msg))                Log.d("tisu", "${response.msg}")            } else {                emit(Result.Success(response))                Log.d("somey", "${response.data}")            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun updateProfile(        name: String,        email: String,        address: String,        phone: String    ): LiveData<Result<ResponseUpdate>> = liveData {        emit(Result.Loading)        try {            val response = apiService.updateProfile(                token = "Bearer ${prefe.getUser().token}",                name = name,                email = email,                address = address,                phone = phone            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    //    Update Profile Avatar    fun updateProfileAvatar(        image_profile: MultipartBody.Part,    ): LiveData<Result<ResponseUpdate>> = liveData {        emit(Result.Loading)        try {            val response = apiService.updateProfileAvatar(                token = "Bearer ${prefe.getUser().token}",                image_profile = image_profile            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun deleteJoin(id: Int): LiveData<Result<ResponseDeleteJoin>> = liveData {        emit(Result.Loading)        try {            val response = apiService.deleteJoinEvent(                token = "Bearer ${prefe.getUser().token}",                id = id            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun uploadEvent(        name: RequestBody,        date: RequestBody,        image: MultipartBody.Part,        pdf_file: MultipartBody.Part,        location: RequestBody,        deskripsi: RequestBody,        lat: Double,        lon: Double,        author: RequestBody,        email: RequestBody,        contact: RequestBody    ): LiveData<Result<ResponseGreevents>> = liveData {        emit(Result.Loading)        try {            val response = apiService.uploadEvents(                token = "Bearer ${prefe.getUser().token}",                name = name,                date = date,                image_poster = image,                pdf_file = pdf_file,                location = location,                deskripsi = deskripsi,                latitude = lat,                longtitude = lon,                author = author,                email = email,                contact_person = contact            )            if (response.status != 200) {                emit(Result.Error(response.msg))                Log.e("gagal", "${response.data}")            } else {                emit(Result.Success(response))                Log.d("hasil", "${response.data}")            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun uploadEventWithoutLocation(        name: RequestBody,        date: RequestBody,        image: MultipartBody.Part,        pdf_file: MultipartBody.Part,        location: RequestBody,        deskripsi: RequestBody,        author: RequestBody,        email: RequestBody,        contact: RequestBody    ): LiveData<Result<ResponseGreevents>> = liveData {        emit(Result.Loading)        try {            val response = apiService.uploadEventsWithoutLocation(                token = "Bearer ${prefe.getUser().token}",                name = name,                date = date,                image_poster = image,                pdf_file = pdf_file,                location = location,                deskripsi = deskripsi,                author = author,                email = email,                contact_person = contact            )            if (response.status != 200) {                emit(Result.Error(response.msg))                Log.e("gagal", "${response.data}")            } else {                emit(Result.Success(response))                Log.d("hasil", "${response.data}")            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun getCommentById(        id: Int    ): LiveData<Result<ResponseDetailComment>> = liveData {        emit(Result.Loading)        try {            val response = apiService.getCommentById(                token = "Bearer ${prefe.getUser().token}",                id = id            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun deleteComment(id: Int): LiveData<Result<ResponseDeleteComment>> = liveData {        emit(Result.Loading)        try {            val response = apiService.deleteComment(                token = "Bearer ${prefe.getUser().token}",                id = id            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun deleteEvent(id: Int): LiveData<Result<ResponseDeleteEvent>> = liveData {        emit(Result.Loading)        try {            val response = apiService.deleteEvent(                token = "Bearer ${prefe.getUser().token}",                id = id,            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun updateEvent(        id: Int,        name: RequestBody,        date: RequestBody,        image: MultipartBody.Part,        pdf_file: MultipartBody.Part,        location: RequestBody,        deskripsi: RequestBody,        lat: Double,        lon: Double,        author: RequestBody,        email: RequestBody,        contact: RequestBody    ): LiveData<Result<ResponseUpdateEvent>> = liveData {        emit(Result.Loading)        try {            val response = apiService.updateEvent(                token = "Bearer ${prefe.getUser().token}",                id = id,                name = name,                date = date,                image_poster = image,                pdf_file = pdf_file,                location = location,                deskripsi = deskripsi,                latitude = lat,                longtitude = lon,                author = author,                email = email,                contact_person = contact            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun updateEventWithoutImage(        id: Int,        name: RequestBody,        date: RequestBody,        location: RequestBody,        deskripsi: RequestBody,        lat: Double,        lon: Double,        author: RequestBody,        email: RequestBody,        contact: RequestBody    ): LiveData<Result<ResponseUpdateEvent>> = liveData {        emit(Result.Loading)        try {            val response = apiService.updateEventWithoutImage(                token = "Bearer ${prefe.getUser().token}",                id = id,                name = name,                date = date,                location = location,                deskripsi = deskripsi,                latitude = lat,                longtitude = lon,                author = author,                email = email,                contact_person = contact            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun updateEventWithoutLocation(        id: Int,        name: RequestBody,        date: RequestBody,        image: MultipartBody.Part,        pdf_file: MultipartBody.Part,        location: RequestBody,        deskripsi: RequestBody,        author: RequestBody,        email: RequestBody,        contact: RequestBody    ): LiveData<Result<ResponseUpdateEvent>> = liveData {        emit(Result.Loading)        try {            val response = apiService.updateEventsWithoutLocation(                token = "Bearer ${prefe.getUser().token}",                id = id,                name = name,                date = date,                location = location,                deskripsi = deskripsi,                author = author,                email = email,                contact_person = contact,                image_poster = image,                pdf_file = pdf_file            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun updateEventWithoutImageLocation(        id: Int,        name: RequestBody,        date: RequestBody,        location: RequestBody,        deskripsi: RequestBody,        author: RequestBody,        email: RequestBody,        contact: RequestBody    ): LiveData<Result<ResponseUpdateEvent>> = liveData {        emit(Result.Loading)        try {            val response = apiService.updateEventWithoutImageLocation(                token = "Bearer ${prefe.getUser().token}",                id = id,                name = name,                date = date,                location = location,                deskripsi = deskripsi,                author = author,                email = email,                contact_person = contact,            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    fun updateComment(        id: Int,        commentar: String    ): LiveData<Result<ResponseUpdateComment>> = liveData {        emit(Result.Loading)        try {            val response = apiService.updateComment(                token = "Bearer ${prefe.getUser().token}",                id = id,                commentar = commentar            )            if (response.status != 200) {                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception) {            emit(Result.Error(e.message.toString()))        }    }    companion object {        @Volatile        private var instance: AppRepository? = null        fun getInstance(            prefe: PreferenceLogin,            apiService: ApiService        ): AppRepository = instance ?: synchronized(this) {            instance ?: AppRepository(prefe, apiService)        }.also { instance = it }    }}